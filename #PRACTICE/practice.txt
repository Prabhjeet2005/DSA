STACK:-
Lec56_HISTOGRAM_NextSmallerElement/histogram.cpp
Lec57_FamousCelebrity_MaxRectangle/famousCeleb.cpp  (v.v.imp)
Lec58_NStacks/nStacks.cpp                           (V.V.imp)
Lec59_SpecialStack/ConstantOperationsStack.cpp      (TRICKY)
Lec54-59_STACKS/Lec54_ImplementationStacks/stackUsingQueue.cpp

QUEUE:-
Lec60_Queue_Implement_circular_deque/DoublyEndedQueue.cpp
Lec61_QueueQuesALL/SlidingWindowFirstNegNo.cpp      (SLIDING WINDOW very imp)
Lec61_QueueQuesALL/nonRepeatCharacter.cpp           (TRICKY)
Lec61_QueueQuesALL/CircularTour.cpp                 (V.V.V.IMP 2-3 times ASKED)
Lec60_Queue_Implement_circular_deque/QueueUsingStack.cpp
Lec61_QueueQuesALL/kQueue.cpp                       (V.V.V IMP)
Lec61_QueueQuesALL/Max&MinSumSubarray.cpp           (SLIDING WINDOW HARD IMP)

BINARY TREE:-
Lec62-73_BinaryTree/Lec63_BinaryQues/DiameterBinaryTree.cpp (TRICKY)
Lec62-73_BinaryTree/Lec63_BinaryQues/BalancedTree.cpp       (Tough)
Lec62-73_BinaryTree/Lec63_BinaryQues/SumTree.cpp            (V.V.IMP 2-3 times Asked)


FAANG IMP QUES:-

(LECTURE 64 & LECTURE 65, V.V.V.V.V.Imp Binary Tree Traversals IMP)


Lec62-73_BinaryTree/Lec64_BinaryTreeMediumQUES/zigZagTreeTraverse.cpp   (Tricky)
Lec62-73_BinaryTree/Lec64_BinaryTreeMediumQUES/boundaryTree.cpp         (Tricky)
Lec62-73_BinaryTree/Lec64_BinaryTreeMediumQUES/verticalTraversal.cpp    (V.V.V IMP Hard Tricky Tough)
Lec62-73_BinaryTree/Lec64_BinaryTreeMediumQUES/topView.cpp              (Imp)
Lec62-73_BinaryTree/Lec64_BinaryTreeMediumQUES/rightView.cpp            (Imp)
Lec62-73_BinaryTree/Lec64_BinaryTreeMediumQUES/leftView.cpp             (Imp)
Lec62-73_BinaryTree/Lec64_BinaryTreeMediumQUES/bottomView.cpp           (Imp)
Lec62-73_BinaryTree/Lec64_BinaryTreeMediumQUES/diagonalTraversal.cpp    (V.Tricky V.IMP Hard)

(ALL LECTURE 64 , 65 Most Important Tricky)

Lec62-73_BinaryTree/Lec65_MostAskedBinaryTree/LCA.cpp         (V.V.IMP 2-3 Times Asked)
Lec62-73_BinaryTree/Lec65_MostAskedBinaryTree/KPathSum.cpp     (IMP)
Lec62-73_BinaryTree/Lec65_MostAskedBinaryTree/KAncestor.cpp   (V.V.V IMP Many Times Asked Tricky Leetcode Hard)
Lec62-73_BinaryTree/Lec65_MostAskedBinaryTree/NonAdjacentMaxSum.cpp

Lec62-73_BinaryTree/Lec66_ConstructTreeInPrePost/TreeFromInPre.cpp      (All PBC Most Important 100% V.V.IMP)
Lec62-73_BinaryTree/Lec66_ConstructTreeInPrePost/TreeFromInPost.cpp      (All PBC Most Important 100% V.V.IMP)


(BURN TREE VERY VERY IMPORTANT 100% MANY TIMES ASKED)
Lec62-73_BinaryTree/Lec67_BurnBinaryTree/burnTree.cpp       (Hard Many Times Asked V.V.V imp)

Lec62-73_BinaryTree/Lec68_MorrisTraversal/morrisTraversal.cpp ( SC->O(1) TC->O(N) Important Inorder,Preorder,Postorder)

Lec62-73_BinaryTree/BST/Lec69_BstInsertDeleteSearch/deletionBST.cpp (Asked A Lot 2-3 Times Asked)





*****************   BST  *********************
Lecture 70, 71 ->    (FAANG IMPORTANT)
Lec62-73_BinaryTree/BST/Lec70_BstFAANG/validBST.cpp 
Lec62-73_BinaryTree/BST/Lec70_BstFAANG/lcaBST.cpp   (Asked Many Times Important)

Lec 71
Lec62-73_BinaryTree/BST/Lec71_BstFAANG/twoSumBST.cpp        (IMP  Asked Many Times)
Lec62-73_BinaryTree/BST/Lec71_BstFAANG/flattenBSTtoLL.cpp   (Tough v.v.v.Imp)
Lec62-73_BinaryTree/BST/Lec71_BstFAANG/BalancedBst.cpp      (AVL Tree V.V.IMP)
Lec62-73_BinaryTree/BST/Lec71_BstFAANG/preorderToBST.cpp    (Tricky)

Lec 72 (Do Practice Merge 2BST)
Lec62-73_BinaryTree/BST/Lec73_Merge2BST.cpp/merge2BST.cpp   (6 Ques in 1 && V.V.V.V.IMP Definitely Come)
{Covers BST->DLL, Merge 2 Sorted DLL, DLL->BST}



**************   HEAP  **************
Lec74
Lec74-Lec77HEAPS/Lec74Implementation_Heapify_HeapSort/Heapify.cpp (V.V.Imp Asked A Lot Amazon)
Lec74-Lec77HEAPS/Lec75HeapQues/KthSmallest.cpp    (Asked Google & all pbc)
Lec74-Lec77HEAPS/Lec75HeapQues/MinCostRope.cpp    (V.V.Imp)



Lec 75 & Lec 76 (V.V.V.Imp Kth Questions Asked A Lot)
Lec74-Lec77HEAPS/Lec76HeapMedium/KthLargestSumSubarray.cpp  (V.IMP)



{***CustonM DS & Operator Overload***
Lec74-Lec77HEAPS/Lec76HeapMedium/MergeKSortedArrays.cpp           (Tough V.V.V.V.IMP Atleat 15 Company Asked a Lot)
*** Lec74-Lec77HEAPS/Lec76HeapMedium/MergeKSortedLinkedList.cpp   (EXTREMELY IMPORTANT Tough V.V.V.V.IMP Atleat 15 Company Asked a Lot)}
Lec74-Lec77HEAPS/Lec77HeapHARD/medianofStream.cpp        (All Company Asked V.V.V.Imp)




*****HASHMAP******
Lec78HashMap/maxFrequeuncyNumber.cpp    (Easy IMPORTANT MANY COMPANIES)



******TRIE********
Lec79-81_Tries/Lec79TrieImplementation/TrieImplement.cpp  (Trie Implementation Tough Very Important)
Lec79-81_Tries/Lec80TrieQues/LongestCommonPrefix.cpp      (Ask Lots of Companies Important V.V.V.IMP Microsoft, Google)
*** Lec79-81_Tries/Lec81_ImplementPhoneDirectory/phoneDirectoryUsingTrie.cpp    (V.V.V.Tough V.V.V.V.IMPORTANT)



******BACKTRACKING********
Lec82-84BackTracking/ratInAMaze.cpp           (EASY Asked All Company V.V.IMP)
**Lec82-84BackTracking/Lec84_SudokuSolver.cpp (ALL Companies EXTREMELY V.V.V.V.IMP GOOGLE,MICROSOFT & ALL Company)



**************GRAPHS  (All Are Important)**********************
Lec85-101_Graphs/Lec86_BFS/BFS.cpp  (V.V.V.V.IMP Ask Lots of Companies Important Microsoft, Google)
Lec85-101_Graphs/Lec87_DFS/Dfs.cpp  (V.V.V.V.IMP Ask Lots of Companies Important Microsoft, Google)

*Lec85-101_Graphs/Lec88_CycleDetectionUndirected/cycleDetectionUndirected_BFS.cpp  (V.V.V.V.IMP Ask Lots of Companies Important Microsoft, Google)
*Lec85-101_Graphs/Lec88_CycleDetectionUndirected/cycleDetectionUndirected_DFS.cpp  (V.V.V.V.IMP Ask Lots of Companies Important Microsoft, Google)

*Lec85-101_Graphs/Lec90_TopologicalSort_DFS/TopologicalSortDFS.cpp (V.V.V.V.IMP Ask Lots of Companies Important Microsoft, Google)
*(Kahn's Algo)Lec85-101_Graphs/Lec91_TopologicalSort_BFS/TopologicalSort_BFS.cpp  (V.V.V.V.IMP Ask Lots of Companies Important Microsoft, Google)

*Lec85-101_Graphs/Lec93_ShortestPathUndirected/ShortestPathDirected.cpp                (V.V.V.V.IMP Ask Lots of Companies Important Microsoft, Google)
*Lec85-101_Graphs/Lec94_ShortestPathDirectedWEIGHTED/shortestPathDirectedWeighted.cpp  (V.V.V.V.IMP Ask Lots of Companies Important Microsoft, Google)

***Lec85-101_Graphs/Lec95_Dijkstra_UndirectedWeighted/Dijkstra.cpp  [Most Important]  (V.V.V.V.IMP Ask Lots of Companies Important Microsoft, Google)

*Lec85-101_Graphs/Lec96_MinSpanningTree/Prims.cpp  (V.V.HARD TOUGH Microsoft)
*Lec85-101_Graphs/Lec97_KruskalMST/KruskalMST.cpp [Disjoint Set + Path Compression] (V.V.V.Imp Microsoft Amazon)

***Lec85-101_Graphs/Lec98_BridgesInGraph/bridgesInGraph.cpp [TOUGH] [HARD] [Interviewer Ask A Lot] (V.V.V.Imp Asked All PBC Google Microsoft 10+)
***Lec85-101_Graphs/Lec99_ArticulationPoints/articulationPoints.cpp [HARD] (Similar to Bridges In Graph) (V.V.V.Imp Asked A Lot)

*** Lec85-101_Graphs/Lec100_Kosaraju/KosarajuStronglyConnectedComponenets.cpp [HARD]  (V.V.V.V.Imp Asked A Lot Google,Microsoft All PBC)




***********[IMPORTANT GRAPHS STRIVER]****************
Lec85-101_Graphs/Lec101_BEYOND_GraphsIMPORTANT/AlienDictionary.cpp  (v.imp)
Lec85-101_Graphs/Lec101_BEYOND_GraphsIMPORTANT/Number_ISLANDS.cpp (Asked 100s of company Most Important Most V.V.V.V.V.IMP ALL Companies)
Lec85-101_Graphs/Lec101_BEYOND_GraphsIMPORTANT/FloodFill.cpp (Google,Microsoft)




************  Dynamic Programming [Only V.V.Imp] ********************

Climbing Stairs (Dp Lec 2 )
Frog Jump       (Dp Lec 3)
[ Max Sum Non Adjacent Elements [after this do HOUSE ROBBER]  (Dp Lec 5)
(**** PRINT ALL SUBSEQUENCES ****)  -------> PICK/Not PICK ]

House Robber [V.imp]
Ninja Training  [Amazon]  [Tabulation V.TOUGH]

Unique Paths (Dp Lec 8)
Unique Paths 2 ( + Blocked Spaces)









































